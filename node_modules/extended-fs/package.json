{
  "name": "extended-fs",
  "description": "Extended functionality of fs with additional q-dependent promises adaptation of fs functions",
  "version": "0.3.3",
  "author": {
    "name": "Adam Ranfelt",
    "email": "adamRenny@gmail.com"
  },
  "license": {
    "type": "MIT",
    "url": "https://raw.github.com/adamRenny/extended-fs/master/LICENSE"
  },
  "dependencies": {
    "q": "0.9.x",
    "graceful-fs": "2.x.x",
    "mkdirp": "*"
  },
  "devDependencies": {
    "mocha": "*",
    "buffertools": "*"
  },
  "keywords": [
    "fs",
    "extended-fs",
    "recursive"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/adamrenny/extended-fs"
  },
  "main": "extended-fs",
  "engines": {
    "node": "*"
  },
  "readme": "# extended-fs\n\n## Usage ([node](http://nodejs.org))\n\n    npm install extended-fs\n\nExtended functionality of fs with additional q-dependent promises adaptation of fs functions.\n\nUtilizes the [`q`](https://npmjs.org/package/q), [`mkdirp`](https://npmjs.org/package/mkdirp), and [`graceful-fs`](https://npmjs.org/package/graceful-fs) to implement missing features and augment existing functions.\n\nActs as a replacement fs for the existing fs, as it copies over existing functionality from fs. In addition to the standard functions available on [node's package `fs`](http://nodejs.org/api/fs.html), this includes functions to support copying and removing directories recursively. Leverages the [`q`](https://npmjs.org/package/q) package to introduce promise driven `fs` methods.\n\n# API\n\n## `extended-fs.recurse(dir, operation, callback)`\n\nAsynchronous recursive directory walk. Operation is performed on each file and provided a signature with the filepath and stats for the triggered file `operation(filepath, operation)`. If the supplied `operation` returns `false`, the recursion for that branch will stop. No arguments other than a possible error are given to the callback.\n\n## `extended-fs.recurseSync(dir, operation)`\n\nSynchronous recursive directory walk.\n\n## `extended-fs.rmDir(dir, callback)`\n\nAsynchronous recursive directory removal. No arguments other than a possible error are given to the callback.\n\n## `extended-fs.rmDirSync(dir)`\n\nSynchronous recursive directory removal.\n\n## `extended-fs.copyFile(src, dest, callback)`\n\nAsynchronous file copy. Copies the file found at `src` over to the `dest` path, overwriting `dest`. No arguments other than a possible error are given to the callback.\n\n## `extended-fs.copyFileSync(src, dest)`\n\nSynchronous file copy.\n\n## `extended-fs.copyDir(src, dest, callback)`\n\nAsynchronous recursive directory copy. Copies all files found at the `src` directory, removing `dest` before writing. No arguments other than a possible error are given to the callback.\n\n## `extended-fs.copyDirSync(src, dest, callback)`\n\nSynchronous recursive directory copy.\n\n## `extended-fs.mkdirp(dir, mode, callback)`\n\nSee [mkdirp](https://github.com/substack/node-mkdirp#mkdirpdir-mode-cb).\n\n## `extended-fs.mkdirpSync(dir, mode)`\n\nSee [mkdirp.sync](https://github.com/substack/node-mkdirp#mkdirpsyncdir-mode).",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/adamrenny/extended-fs/issues"
  },
  "_id": "extended-fs@0.3.3",
  "_from": "extended-fs@~0.3.1"
}
